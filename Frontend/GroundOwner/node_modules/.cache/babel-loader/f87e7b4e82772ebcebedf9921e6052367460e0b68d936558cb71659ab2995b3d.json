{"ast":null,"code":"var _jsxFileName = \"/Users/aukte/Desktop/GroundOwner/src/Components/Reservations.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useLocation } from \"react-router-dom\";\n// import Calendar from \"./Calender\";\n\n// export default function Reservations() {\n//   const location = useLocation();\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [showFilteredBookings, setShowFilteredBookings] = useState(false);\n//   const [filteredBookings, setFilteredBookings] = useState([]);\n//   const [bookings, setBookings] = useState([]);\n\n// Fetch bookings from the database on component mount\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useLocation } from \"react-router-dom\";\nimport Calendar from \"./Calender\";\nimport { Navigate } from \"react-router-dom\";\n\n// export default function Reservations() {\n//   const location = useLocation();\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [showFilteredBookings, setShowFilteredBookings] = useState(false);\n//   const [filteredBookings, setFilteredBookings] = useState([]);\n//   const [bookings, setBookings] = useState([]);\n\n//   // Fetch bookings from the database on component mount\n//   useEffect(() => {\n//     const token = sessionStorage.getItem(\"authToken\");\n\n//     if (!location.state || !location.state.groundID) {\n//       alert(\"Ground ID is missing. Redirecting...\");\n//       return <Navigate to=\"/authpageownerlogin\" replace />;\n//     }\n\n//     const ground_id = location.state.groundID\n\n//     if (!token) {\n//       alert(\"No authentication token found. Redirecting to login.\");\n//       return <Navigate to=\"/authpageownerlogin\" replace />; // Redirect to login page if no token\n//     }\n//     console.log(\"token recieved\")\n\n//     const fetchBookings = async () => {\n//       try {\n//         const response = await axios.get(`http://127.0.0.1:8000/bookings/${parseInt(ground_id)}`, {\n//           headers: {\n//             Authorization: `Bearer ${token}`,  // Send the token in the Authorization header\n//           },\n//         });\n//         setBookings(response.data);\n//         console.log(\"API Response:\", response.data);\n\n//       } catch (error) {\n//         console.error(\"Error fetching bookings:\", error);\n//         alert(\"Unauthorized access. Please log in again.\");\n//         return <Navigate to=\"/authpageownerlogin\" replace />; // Redirect to login page if no token\n//       }\n//     };\n//     fetchBookings();\n//   }, [location.state.groundID]); // Empty dependency array to run on mount only\n\n//   // const formatDate = (date) => {\n//   //   return `${date.getDate()} ${date.toLocaleString(\"default\", {\n//   //     month: \"short\",\n//   //   })} ${date.getFullYear()}`;\n//   // };\n\n//   function parseDateTimeToTime(datetimeStr) {\n//     const [date, time] = datetimeStr.split('T');\n//     return time;\n//   }\n\n//   const parseTime = (timeString) => {\n//     const time = parseDateTimeToTime(timeString)\n//     let [hours, minutes, seconds] = time.split(\":\").map(Number);\n//     time = new Date(0, 0, 0, hours, minutes, seconds);\n//     console.log(time)\n//     return time;\n//   };\n\n//   function formatDate(date) {\n//     var d = new Date(date),\n//         month = '' + (d.getMonth() + 1),\n//         day = '' + d.getDate(),\n//         year = d.getFullYear();\n\n//     if (month.length < 2) \n//         month = '0' + month;\n//     if (day.length < 2) \n//         day = '0' + day;\n\n//     return [year, month, day].join('-');\n// }\n\n//   const today = formatDate(new Date());\n\n//   const upcomingBookings = bookings.filter((booking) => {\n//     const bookingDate = new Date(booking.booking_date);\n//     const todayDate = today\n//     return bookingDate >= todayDate;\n//   });\n\n//   const sortedBookings = upcomingBookings.sort((a, b) => {\n//     const dateA = new Date(a.booking_date);\n//     const dateB = new Date(b.booking_date);\n//     if (dateA - dateB === 0) {\n//       return (\n//         parseTime(a.start_time.split(\" - \")[0]) -\n//         parseTime(b.start_time.split(\" - \")[0])\n//       );\n//     }\n//     return dateA - dateB;\n//   });\n\n//   // const sortedBookings = upcomingBookings.sort((a, b) => {\n//   //   const formattedDateA = formatDate(a.booking_date);\n//   //   const formattedDateB = formatDate(b.booking_date);\n\n//   //   // Compare dates first\n//   //   const dateComparison = formattedDateA.localeCompare(formattedDateB);\n//   //   if (dateComparison !== 0) {\n//   //     return dateComparison;\n//   //   }\n\n//   //   // If dates are equal, compare timings\n//   //   const timeA = parseTime(a.start_time.split(\" - \")[0]);\n//   //   const timeB = parseTime(b.start_time.split(\" - \")[0]);\n//   //   return timeA - timeB;\n//   // });\n\n//   const handleShowSlotsClick = () => {\n//     console.log(\"clickkkkkkkkkkk\")\n//     if (selectedDate) {\n//       // const formattedDate = formatDate(selectedDate);\n//       const filtered = bookings\n//         // .filter((booking) => booking.booking_date === formattedDate)\n//         // .sort(\n//         //   (a, b) =>\n//         //     parseTime(a.start_time.split(\" - \")[0]) -\n//         //     parseTime(b.start_time.split(\" - \")[0])\n//         // );\n//       setFilteredBookings(filtered);\n//       setShowFilteredBookings(true);\n//       console.log(sortedBookings)\n//     } else {\n//       alert(\"Please select a date from the calendar!\");\n//     }\n//   };\n\n//   const handlePaymentStatusChange = async (id, newStatus) => {\n//     try {\n//       // Send an update request to the backend\n//       await axios.patch(`http://localhost:5000/api/bookings/${1}`, {\n//         payment: newStatus,\n//       });\n\n//       // Update the local state\n//       const updatedBookings = bookings.map((booking) =>\n//         booking.id === id ? { ...booking, payment: newStatus } : booking\n//       );\n//       setBookings(updatedBookings);\n//     } catch (error) {\n//       console.error(\"Error updating payment status:\", error);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <div className=\"nav-style\">\n//         <div className=\"nav-underline\"></div>\n//       </div>\n\n//       {location.pathname !== \"/authpageownerlogin\" &&\n//         location.pathname !== \"/authpageownersignup\" &&\n//         location.pathname !== \"/revenuegrounddetails\" &&\n//         location.pathname !== \"/viewprofile\" &&\n//         location.pathname !== \"/help\" && (\n//           <>\n//             <div className=\"container my-5\">\n//               <h2 className=\"pt-5\" style={{ color: \"#55ad9b\" }}>\n//                 Upcoming Bookings\n//               </h2>\n//               <div className=\"reservations\">\n//                 <div className=\"reservations-list\">\n//                   {sortedBookings.length > 0 ? (\n//                     sortedBookings.map((booking) => (\n//                       <div\n//                         key={booking.id}\n//                         className=\"upcoming-booking p-3 border mb-2\"\n//                       >\n//                         <h5 style={{ color: \"#55ad9b\" }}>{booking.pitch_name}</h5>\n//                         <span>\n//                           <b>Timing:</b> {booking.start_time}\n//                           <br />\n//                         </span>\n//                         <span>\n//                           <b>Date:</b> {booking.booking_date}\n//                           <br />\n//                         </span>\n//                         <span>\n//                           <b>Booked By:</b> {booking.user_email}\n//                           <br />\n//                         </span>\n//                         <span>\n//                           <b>Contact:</b> {booking.user_contact_no}\n//                           <br />\n//                         </span>\n//                         <span>\n//                           <b>Status:</b>{\" \"}\n//                           {booking.payment_status ? (\n//                             <span>{booking.payment_status}</span>\n//                           ) : (\n//                             <>\n//                               <button\n//                                 onClick={() =>\n//                                   handlePaymentStatusChange(booking.id, \"Paid\")\n//                                 }\n//                                 className=\"btn btn-success btn-sm me-2\"\n//                               >\n//                                 Paid\n//                               </button>\n//                               <button\n//                                 onClick={() =>\n//                                   handlePaymentStatusChange(\n//                                     booking.id,\n//                                     \"UnPaid\"\n//                                   )\n//                                 }\n//                                 className=\"btn btn-warning btn-sm\"\n//                               >\n//                                 UnPaid\n//                               </button>\n//                             </>\n//                           )}\n//                           <br />\n//                         </span>\n//                       </div>\n//                     ))\n//                   ) : (\n//                     <div className=\"no-booking-message text-center mt-3\">\n//                       <h5 style={{ color: \"#0d705c\" }}>No upcoming Booking!</h5>\n//                     </div>\n//                   )}\n//                 </div>\n//                 <div className=\"calender\">\n//                   <h2 className=\"mb-5\" style={{ color: \"#55ad9b\" }}>\n//                     Check Upcoming Bookings\n//                   </h2>\n//                   <Calendar\n//                     selectedDate={selectedDate}\n//                     setSelectedDate={setSelectedDate}\n//                   />\n//                   <div className=\"booked-slots\">\n//                     <button\n//                       className=\"my-5 slots-button dropdown btn-back\"\n//                       onClick={handleShowSlotsClick}\n//                     >\n//                       SHOW SLOTS STATUS\n//                     </button>\n//                   </div>\n\n//                   {/* Filtered Bookings Popup */}\n//                   {showFilteredBookings && (\n//                     <div className=\"overlay-bookings\">\n//                       <div className=\"dropdown-bookings mt-3\">\n//                         <button\n//                           className=\"close-button\"\n//                           onClick={() => setShowFilteredBookings(false)}\n//                         >\n//                           &times;\n//                         </button>\n//                         {filteredBookings.length > 0 ? (\n//                           filteredBookings.map((booking, index) => (\n//                             <div\n//                               key={index}\n//                               className=\"upcoming-booking p-2 border\"\n//                             >\n//                               <h5 style={{ color: \"#55ad9b\" }}>\n//                                 {booking.pitch_name}\n//                               </h5>\n//                               <span>\n//                                 <b>Timing:</b> {parseDateTimeToTime(booking.start_time)}<b> -</b> {parseDateTimeToTime(booking.end_time)}\n//                                 <br />\n//                               </span>\n//                               <span>\n//                                 <b>Date:</b> {booking.booking_date}\n//                                 <br />\n//                               </span>\n//                               <span>\n//                                 <b>Booked By:</b> {booking.user_email}\n//                                 <br />\n//                               </span>\n//                               <span>\n//                                 <b>Contact:</b> {booking.user_contact_no}\n//                                 <br />\n//                               </span>\n//                               <span>\n//                                 <b>Status:</b>{\" \"}\n//                                 {booking.payment_status ? (\n//                                   // If \"payment\" has a value, display it as plain text\n//                                   <span>{booking.payment_status}</span>\n//                                 ) : (\n//                                   // If \"payment\" is empty, show two Unpaid\n//                                   <span>{\"UnPaid\"}</span>\n//                                 )}\n//                                 <br />\n//                               </span>\n//                             </div>\n//                           ))\n//                         ) : (\n//                           <p>No bookings found for the selected date.</p>\n//                         )}\n//                       </div>\n//                     </div>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           </>\n//         )}\n//     </>\n//   );\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Reservations() {\n  _s();\n  var _location$state3;\n  const location = useLocation();\n  const [bookings, setBookings] = useState([]);\n  useEffect(() => {\n    var _location$state2;\n    const token = sessionStorage.getItem(\"authToken\");\n    if (!token) {\n      console.log(\"No Token Found\");\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/authpageownerlogin\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 14\n      }, this);\n    }\n    const fetchBookings = async () => {\n      try {\n        var _location$state;\n        const response = await axios.get(`http://127.0.0.1:8000/bookings/${(_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.groundID}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setBookings(response.data);\n        console.log(\"Bookings Fetched:\", response.data);\n      } catch (error) {\n        console.error(\"Fetch Error:\", error);\n        alert(\"Unauthorized access. Redirecting to login.\");\n        return /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/authpageownerlogin\",\n          replace: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 16\n        }, this);\n      }\n    };\n    if ((_location$state2 = location.state) !== null && _location$state2 !== void 0 && _location$state2.groundID) {\n      fetchBookings();\n    }\n  }, [(_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.groundID]);\n  if (!bookings.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading bookings...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upcoming Bookings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this), bookings.map(booking => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: booking.pitch_name\n    }, booking.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 362,\n    columnNumber: 5\n  }, this);\n}\n_s(Reservations, \"YYPUx0Y/lY3Om5XQAJ319G+1hYI=\", false, function () {\n  return [useLocation];\n});\n_c = Reservations;\nvar _c;\n$RefreshReg$(_c, \"Reservations\");","map":{"version":3,"names":["React","useState","useEffect","axios","useLocation","Calendar","Navigate","jsxDEV","_jsxDEV","Reservations","_s","_location$state3","location","bookings","setBookings","_location$state2","token","sessionStorage","getItem","console","log","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","fetchBookings","_location$state","response","get","state","groundID","headers","Authorization","data","error","alert","length","children","map","booking","pitch_name","id","_c","$RefreshReg$"],"sources":["/Users/aukte/Desktop/GroundOwner/src/Components/Reservations.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useLocation } from \"react-router-dom\";\n// import Calendar from \"./Calender\";\n\n// export default function Reservations() {\n//   const location = useLocation();\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [showFilteredBookings, setShowFilteredBookings] = useState(false);\n//   const [filteredBookings, setFilteredBookings] = useState([]);\n//   const [bookings, setBookings] = useState([]);\n\n  // Fetch bookings from the database on component mount\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useLocation } from \"react-router-dom\";\nimport Calendar from \"./Calender\";\nimport { Navigate } from \"react-router-dom\";\n\n// export default function Reservations() {\n//   const location = useLocation();\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [showFilteredBookings, setShowFilteredBookings] = useState(false);\n//   const [filteredBookings, setFilteredBookings] = useState([]);\n//   const [bookings, setBookings] = useState([]);\n\n//   // Fetch bookings from the database on component mount\n//   useEffect(() => {\n//     const token = sessionStorage.getItem(\"authToken\");\n\n//     if (!location.state || !location.state.groundID) {\n//       alert(\"Ground ID is missing. Redirecting...\");\n//       return <Navigate to=\"/authpageownerlogin\" replace />;\n//     }\n    \n//     const ground_id = location.state.groundID\n\n//     if (!token) {\n//       alert(\"No authentication token found. Redirecting to login.\");\n//       return <Navigate to=\"/authpageownerlogin\" replace />; // Redirect to login page if no token\n//     }\n//     console.log(\"token recieved\")\n\n//     const fetchBookings = async () => {\n//       try {\n//         const response = await axios.get(`http://127.0.0.1:8000/bookings/${parseInt(ground_id)}`, {\n//           headers: {\n//             Authorization: `Bearer ${token}`,  // Send the token in the Authorization header\n//           },\n//         });\n//         setBookings(response.data);\n//         console.log(\"API Response:\", response.data);\n\n//       } catch (error) {\n//         console.error(\"Error fetching bookings:\", error);\n//         alert(\"Unauthorized access. Please log in again.\");\n//         return <Navigate to=\"/authpageownerlogin\" replace />; // Redirect to login page if no token\n//       }\n//     };\n//     fetchBookings();\n//   }, [location.state.groundID]); // Empty dependency array to run on mount only\n\n//   // const formatDate = (date) => {\n//   //   return `${date.getDate()} ${date.toLocaleString(\"default\", {\n//   //     month: \"short\",\n//   //   })} ${date.getFullYear()}`;\n//   // };\n\n//   function parseDateTimeToTime(datetimeStr) {\n//     const [date, time] = datetimeStr.split('T');\n//     return time;\n//   }\n\n//   const parseTime = (timeString) => {\n//     const time = parseDateTimeToTime(timeString)\n//     let [hours, minutes, seconds] = time.split(\":\").map(Number);\n//     time = new Date(0, 0, 0, hours, minutes, seconds);\n//     console.log(time)\n//     return time;\n//   };\n\n//   function formatDate(date) {\n//     var d = new Date(date),\n//         month = '' + (d.getMonth() + 1),\n//         day = '' + d.getDate(),\n//         year = d.getFullYear();\n\n//     if (month.length < 2) \n//         month = '0' + month;\n//     if (day.length < 2) \n//         day = '0' + day;\n\n//     return [year, month, day].join('-');\n// }\n\n//   const today = formatDate(new Date());\n\n//   const upcomingBookings = bookings.filter((booking) => {\n//     const bookingDate = new Date(booking.booking_date);\n//     const todayDate = today\n//     return bookingDate >= todayDate;\n//   });\n\n//   const sortedBookings = upcomingBookings.sort((a, b) => {\n//     const dateA = new Date(a.booking_date);\n//     const dateB = new Date(b.booking_date);\n//     if (dateA - dateB === 0) {\n//       return (\n//         parseTime(a.start_time.split(\" - \")[0]) -\n//         parseTime(b.start_time.split(\" - \")[0])\n//       );\n//     }\n//     return dateA - dateB;\n//   });\n\n//   // const sortedBookings = upcomingBookings.sort((a, b) => {\n//   //   const formattedDateA = formatDate(a.booking_date);\n//   //   const formattedDateB = formatDate(b.booking_date);\n  \n//   //   // Compare dates first\n//   //   const dateComparison = formattedDateA.localeCompare(formattedDateB);\n//   //   if (dateComparison !== 0) {\n//   //     return dateComparison;\n//   //   }\n  \n//   //   // If dates are equal, compare timings\n//   //   const timeA = parseTime(a.start_time.split(\" - \")[0]);\n//   //   const timeB = parseTime(b.start_time.split(\" - \")[0]);\n//   //   return timeA - timeB;\n//   // });\n\n//   const handleShowSlotsClick = () => {\n//     console.log(\"clickkkkkkkkkkk\")\n//     if (selectedDate) {\n//       // const formattedDate = formatDate(selectedDate);\n//       const filtered = bookings\n//         // .filter((booking) => booking.booking_date === formattedDate)\n//         // .sort(\n//         //   (a, b) =>\n//         //     parseTime(a.start_time.split(\" - \")[0]) -\n//         //     parseTime(b.start_time.split(\" - \")[0])\n//         // );\n//       setFilteredBookings(filtered);\n//       setShowFilteredBookings(true);\n//       console.log(sortedBookings)\n//     } else {\n//       alert(\"Please select a date from the calendar!\");\n//     }\n//   };\n\n//   const handlePaymentStatusChange = async (id, newStatus) => {\n//     try {\n//       // Send an update request to the backend\n//       await axios.patch(`http://localhost:5000/api/bookings/${1}`, {\n//         payment: newStatus,\n//       });\n\n//       // Update the local state\n//       const updatedBookings = bookings.map((booking) =>\n//         booking.id === id ? { ...booking, payment: newStatus } : booking\n//       );\n//       setBookings(updatedBookings);\n//     } catch (error) {\n//       console.error(\"Error updating payment status:\", error);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <div className=\"nav-style\">\n//         <div className=\"nav-underline\"></div>\n//       </div>\n\n//       {location.pathname !== \"/authpageownerlogin\" &&\n//         location.pathname !== \"/authpageownersignup\" &&\n//         location.pathname !== \"/revenuegrounddetails\" &&\n//         location.pathname !== \"/viewprofile\" &&\n//         location.pathname !== \"/help\" && (\n//           <>\n//             <div className=\"container my-5\">\n//               <h2 className=\"pt-5\" style={{ color: \"#55ad9b\" }}>\n//                 Upcoming Bookings\n//               </h2>\n//               <div className=\"reservations\">\n//                 <div className=\"reservations-list\">\n//                   {sortedBookings.length > 0 ? (\n//                     sortedBookings.map((booking) => (\n//                       <div\n//                         key={booking.id}\n//                         className=\"upcoming-booking p-3 border mb-2\"\n//                       >\n//                         <h5 style={{ color: \"#55ad9b\" }}>{booking.pitch_name}</h5>\n//                         <span>\n//                           <b>Timing:</b> {booking.start_time}\n//                           <br />\n//                         </span>\n//                         <span>\n//                           <b>Date:</b> {booking.booking_date}\n//                           <br />\n//                         </span>\n//                         <span>\n//                           <b>Booked By:</b> {booking.user_email}\n//                           <br />\n//                         </span>\n//                         <span>\n//                           <b>Contact:</b> {booking.user_contact_no}\n//                           <br />\n//                         </span>\n//                         <span>\n//                           <b>Status:</b>{\" \"}\n//                           {booking.payment_status ? (\n//                             <span>{booking.payment_status}</span>\n//                           ) : (\n//                             <>\n//                               <button\n//                                 onClick={() =>\n//                                   handlePaymentStatusChange(booking.id, \"Paid\")\n//                                 }\n//                                 className=\"btn btn-success btn-sm me-2\"\n//                               >\n//                                 Paid\n//                               </button>\n//                               <button\n//                                 onClick={() =>\n//                                   handlePaymentStatusChange(\n//                                     booking.id,\n//                                     \"UnPaid\"\n//                                   )\n//                                 }\n//                                 className=\"btn btn-warning btn-sm\"\n//                               >\n//                                 UnPaid\n//                               </button>\n//                             </>\n//                           )}\n//                           <br />\n//                         </span>\n//                       </div>\n//                     ))\n//                   ) : (\n//                     <div className=\"no-booking-message text-center mt-3\">\n//                       <h5 style={{ color: \"#0d705c\" }}>No upcoming Booking!</h5>\n//                     </div>\n//                   )}\n//                 </div>\n//                 <div className=\"calender\">\n//                   <h2 className=\"mb-5\" style={{ color: \"#55ad9b\" }}>\n//                     Check Upcoming Bookings\n//                   </h2>\n//                   <Calendar\n//                     selectedDate={selectedDate}\n//                     setSelectedDate={setSelectedDate}\n//                   />\n//                   <div className=\"booked-slots\">\n//                     <button\n//                       className=\"my-5 slots-button dropdown btn-back\"\n//                       onClick={handleShowSlotsClick}\n//                     >\n//                       SHOW SLOTS STATUS\n//                     </button>\n//                   </div>\n\n//                   {/* Filtered Bookings Popup */}\n//                   {showFilteredBookings && (\n//                     <div className=\"overlay-bookings\">\n//                       <div className=\"dropdown-bookings mt-3\">\n//                         <button\n//                           className=\"close-button\"\n//                           onClick={() => setShowFilteredBookings(false)}\n//                         >\n//                           &times;\n//                         </button>\n//                         {filteredBookings.length > 0 ? (\n//                           filteredBookings.map((booking, index) => (\n//                             <div\n//                               key={index}\n//                               className=\"upcoming-booking p-2 border\"\n//                             >\n//                               <h5 style={{ color: \"#55ad9b\" }}>\n//                                 {booking.pitch_name}\n//                               </h5>\n//                               <span>\n//                                 <b>Timing:</b> {parseDateTimeToTime(booking.start_time)}<b> -</b> {parseDateTimeToTime(booking.end_time)}\n//                                 <br />\n//                               </span>\n//                               <span>\n//                                 <b>Date:</b> {booking.booking_date}\n//                                 <br />\n//                               </span>\n//                               <span>\n//                                 <b>Booked By:</b> {booking.user_email}\n//                                 <br />\n//                               </span>\n//                               <span>\n//                                 <b>Contact:</b> {booking.user_contact_no}\n//                                 <br />\n//                               </span>\n//                               <span>\n//                                 <b>Status:</b>{\" \"}\n//                                 {booking.payment_status ? (\n//                                   // If \"payment\" has a value, display it as plain text\n//                                   <span>{booking.payment_status}</span>\n//                                 ) : (\n//                                   // If \"payment\" is empty, show two Unpaid\n//                                   <span>{\"UnPaid\"}</span>\n//                                 )}\n//                                 <br />\n//                               </span>\n//                             </div>\n//                           ))\n//                         ) : (\n//                           <p>No bookings found for the selected date.</p>\n//                         )}\n//                       </div>\n//                     </div>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           </>\n//         )}\n//     </>\n//   );\n// }\n\nexport default function Reservations() {\n  const location = useLocation();\n  const [bookings, setBookings] = useState([]);\n\n  useEffect(() => {\n    const token = sessionStorage.getItem(\"authToken\");\n    if (!token) {\n      console.log(\"No Token Found\");\n      return <Navigate to=\"/authpageownerlogin\" replace />;\n    }\n\n    const fetchBookings = async () => {\n      try {\n        const response = await axios.get(\n          `http://127.0.0.1:8000/bookings/${location.state?.groundID}`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        );\n        setBookings(response.data);\n        console.log(\"Bookings Fetched:\", response.data);\n      } catch (error) {\n        console.error(\"Fetch Error:\", error);\n        alert(\"Unauthorized access. Redirecting to login.\");\n        return <Navigate to=\"/authpageownerlogin\" replace />;\n      }\n    };\n\n    if (location.state?.groundID) {\n      fetchBookings();\n    }\n  }, [location.state?.groundID]);\n\n  if (!bookings.length) {\n    return <div>Loading bookings...</div>;\n  }\n\n  return (\n    <div>\n      <h2>Upcoming Bookings</h2>\n      {bookings.map((booking) => (\n        <p key={booking.id}>{booking.pitch_name}</p>\n      ))}\n    </div>\n  );\n}\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,QAAQ,QAAQ,kBAAkB;;AAE3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}